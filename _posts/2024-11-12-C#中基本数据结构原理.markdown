---
layout:     post
title:      "2024-11-12-C#中基本数据结构原理"
subtitle:   "C#中内置的基本数据结构原理"
date:       2024-11-12
author:     "CSoap"
header-img: "img/home-bg-o.jpg"
tags:
    - C#
---
- Array
    ```
    在C#中，数组（Array）是一种基本的数据结构，用于存储相同类型的元素集合。数组在内存中是连续存储的，这意味着数组中的每个元素都紧密地排列在一起，没有间隙。这种存储方式使得数组在访问元素时能够提供快速的随机访问性能，因为可以通过索引直接计算出元素的内存地址。

    C#中的数组是从 System.Array 类派生的，这个类提供了数组的基本功能和属性。数组是固定大小的，一旦创建，其大小就不能改变。数组的每个元素都有一个索引，从0开始，直到数组长度减1。

    以下是C#数组的一些关键特性：

    类型安全：数组存储的元素都是相同的数据类型，这提供了类型安全。

    固定大小：数组在创建时必须指定大小，并且在其生命周期内大小不可变。

    内存连续性：数组的元素在内存中是连续存储的，这使得通过索引访问元素非常快速。

    零索引：数组的第一个元素索引是0，最后一个元素的索引是数组长度减1。

    多维数组：C#支持多维数组和交错数组（数组的数组）。

    内置方法：System.Array 类提供了各种方法，如 Sort、BinarySearch、Find、FindAll、Resize 等。

    数组的内部实现涉及以下几个方面：

    内存分配：当创建一个数组时，CLR（公共语言运行时）为数组分配一块连续的内存空间。数组的大小是在创建时确定的，并且每个元素都会初始化为其类型的默认值（例如，数值类型的默认值是0，引用类型的默认值是null）。

    元素访问：由于数组是连续存储的，所以可以通过基地址和索引直接计算出任何元素的地址。数组元素的地址计算公式通常是 base_address + (index * element_size)，其中 base_address 是数组的起始地址，index 是元素的索引，element_size 是数组元素的大小。

    边界检查：C#在运行时对数组进行边界检查，以确保不会发生越界访问。如果尝试访问超出数组界限的元素，将抛出 IndexOutOfRangeException。

    垃圾回收：数组是托管在CLR的堆上的，因此它们会受到垃圾回收器的管理。当没有任何引用指向一个数组时，垃圾回收器会在适当的时候回收它。
    ```
- List
    ```
    在C#中，List<T> 是一个泛型动态数组的实现。它提供了一个数组的所有功能，并且可以动态地增长和缩小。以下是 List<T> 的一些关键实现原理：

    内部数组：List<T> 在内部使用一个数组来存储数据。当你创建一个 List<T> 实例时，它会初始化一个默认大小的数组。这个默认大小可以通过传递一个整数到 List<T> 的构造函数来改变。

    动态扩容：当添加元素到 List<T> 使得内部数组的容量不足以容纳更多元素时，List<T> 会自动创建一个更大的数组，并将旧数组的元素复制到新数组中。这个新数组的大小通常是旧数组的两倍，这样做是为了平摊添加元素的成本（称为摊销成本）。这意味着虽然单个添加操作可能需要重新分配和复制，但是平均来看，添加操作的时间复杂度仍然是 O(1)。

    索引访问：由于 List<T> 使用数组作为其底层数据结构，所以它可以提供快速的索引访问，时间复杂度为 O(1)。这意味着无论列表有多长，访问任何位置的元素所需的时间都是恒定的。

    元素添加：添加新元素到 List<T> 的末尾是一个非常快速的操作，因为它只是简单地将元素放到内部数组的下一个可用位置。如果数组已满，会发生前面提到的动态扩容过程。

    元素删除：从 List<T> 中删除元素通常涉及到将删除点之后的所有元素向前移动一个位置来填补空出来的位置。这是一个 O(n) 操作，因为它可能需要移动大量的元素。

    迭代：List<T> 可以使用 foreach 循环进行迭代，这是通过实现 IEnumerable<T> 和 IEnumerable 接口来实现的。迭代过程本身是 O(n) 的，因为它需要遍历整个列表。

    线程安全：List<T> 不是线程安全的。如果在多线程环境中使用 List<T>，需要外部同步机制来保证线程安全。

    容量和计数：List<T> 维护两个关键的属性：Capacity 和 Count。Capacity 是内部数组可以容纳的元素数量，而 Count 是实际添加到 List<T> 中的元素数量。

    List<T> 的这些特性使得它成为在需要动态数组功能时的一个非常有用的数据结构。它在 .NET 框架中广泛使用，并且是许多应用程序中集合处理的基础。
    ```

- LinkedList 
    ```
    在C#中，LinkedList<T> 是一个通用的双向链表实现，它是 System.Collections.Generic 命名空间的一部分。与数组不同，链表中的元素不是连续存储的，而是每个元素都包含指向列表中前一个和下一个元素的引用。这种结构使得在链表中添加和移除元素（尤其是在列表的开头和结尾）时非常高效，因为这些操作不需要移动其他元素。

    LinkedList<T> 的关键特性包括：

    动态大小：LinkedList<T> 的大小是动态的，可以根据需要增长或缩减。

    双向链接：每个节点（LinkedListNode<T>）都有两个引用，一个指向前一个节点，一个指向下一个节点。

    快速插入和删除：可以在 O(1) 时间复杂度内在任何位置插入或删除节点，前提是你已经有了该位置的节点引用。

    无索引访问：与数组不同，LinkedList<T> 不支持通过索引直接访问元素。要访问元素，必须从头节点或尾节点开始遍历链表。

    循环引用：LinkedList<T> 的头节点和尾节点是通过 First 和 Last 属性访问的，它们分别指向链表的第一个和最后一个节点。链表的尾节点的 Next 属性为 null，头节点的 Previous 属性也为 null。

    LinkedList<T> 的内部实现涉及以下几个方面：

    节点：链表的每个元素都是一个 LinkedListNode<T> 对象，它包含三个主要属性：Value（存储数据），Next（指向链表中下一个节点的引用），和 Previous（指向链表中前一个节点的引用）。

    头尾节点管理：LinkedList<T> 维护对头节点和尾节点的引用，这使得在链表的两端添加或移除节点非常快速。

    枚举器：LinkedList<T> 提供了一个枚举器，允许使用 foreach 循环遍历链表中的所有元素。

    垃圾回收：和数组一样，LinkedList<T> 中的节点也是托管在CLR的堆上的，因此它们会受到垃圾回收器的管理。当没有任何引用指向一个节点时，垃圾回收器会在适当的时候回收它。

    using System.Collections.Generic;

    // 创建一个 LinkedList 实例
    LinkedList<int> linkedList = new LinkedList<int>();

    // 在链表末尾添加元素
    linkedList.AddLast(1);
    linkedList.AddLast(2);
    linkedList.AddLast(3);

    // 在链表开头添加元素
    linkedList.AddFirst(0);

    // 遍历链表
    foreach (int value in linkedList)
    {
        Console.WriteLine(value);
    }

    // 移除链表中的元素
    linkedList.Remove(1); // 移除值为1的节点

    ```

- Stack
    ```
    在C#中，Stack<T> 是一个表示后进先出（Last In First Out, LIFO）集合的泛型类。它在 System.Collections.Generic 命名空间中定义，允许用户在栈顶添加（推入）和移除（弹出）元素。Stack<T> 类的实现基于动态数组，这意味着它在内部使用数组来存储数据，并且可以根据需要自动调整大小。

    以下是 Stack<T> 的一些关键特性：

    泛型支持：Stack<T> 是泛型的，可以存储任何类型的对象。

    动态大小：栈的大小会根据元素的添加和移除动态变化。

    后进先出：最后添加到栈的元素将是第一个被移除的。

    简单的操作：提供了 Push、Pop 和 Peek 等简单的操作方法。

    Stack<T> 的内部实现涉及以下几个方面：

    内部数组：Stack<T> 使用一个私有的数组字段来存储元素。当元素被推入栈时，它们被添加到这个数组中。

    容量管理：当内部数组不够大以容纳更多元素时，Stack<T> 会自动创建一个更大的数组，并将所有现有元素复制到新数组中。这个过程称为“动态扩容”。

    栈顶指针：Stack<T> 维护一个指向栈顶元素的指针（或索引）。Push 操作会增加这个指针，而 Pop 操作会减少它。

    时间复杂度：Push 和 Pop 操作通常是 O(1) 的时间复杂度，但在动态扩容的情况下，单个操作可能需要 O(n) 的时间复杂度，其中 n 是栈的当前元素数量。

    垃圾回收：由于 Stack<T> 是基于数组的，所以它的元素是托管在CLR的堆上的。当栈实例不再被引用时，它和它的内部数组都会被垃圾回收器回收。

    下面是一个简单的 Stack<T> 的使用示例：

    Copy
    using System.Collections.Generic;

    // 创建一个 Stack 实例
    Stack<int> stack = new Stack<int>();

    // 推入元素
    stack.Push(1);
    stack.Push(2);
    stack.Push(3);

    // 查看栈顶元素
    int top = stack.Peek(); // 返回 3，但不移除它

    // 弹出元素
    int popped = stack.Pop(); // 返回 3，并将其从栈中移除

    // 遍历栈（注意：这会从栈顶到栈底遍历元素）
    foreach (int item in stack)
    {
        Console.WriteLine(item);
    }


    在这个示例中，我们创建了一个 Stack<int> 的实例，并向其中推入了几个元素。然后我们查看了栈顶元素，并弹出了它。我们还遍历了栈中的元素，这将按照后进先出的顺序进行。由于 Stack<T> 的动态数组实现，我们不需要担心栈的大小限制，它会根据需要自动增长。
    ```

- Queue
    ```
    在C#中，Queue<T> 是一个表示先进先出（First In First Out, FIFO）集合的泛型类。它在 System.Collections.Generic 命名空间中定义，允许用户在队列的末尾添加元素（入队）并从队列的开头移除元素（出队）。Queue<T> 类的实现基于动态数组，这意味着它在内部使用数组来存储数据，并且可以根据需要自动调整大小。

    以下是 Queue<T> 的一些关键特性：

    泛型支持：Queue<T> 是泛型的，可以存储任何类型的对象。

    动态大小：队列的大小会根据元素的添加和移除动态变化。

    先进先出：最先添加到队列的元素将是第一个被移除的。

    简单的操作：提供了 Enqueue、Dequeue 和 Peek 等简单的操作方法。

    Queue<T> 的内部实现涉及以下几个方面：

    内部数组：Queue<T> 使用一个私有的数组字段来存储元素。当元素被入队时，它们被添加到这个数组的末尾。

    头尾指针：Queue<T> 维护两个指针（或索引），一个指向队列头部的第一个有效元素，另一个指向队列尾部下一个入队元素的位置。这两个指针有助于快速进行入队和出队操作。

    循环缓冲区：为了有效地利用数组空间并避免频繁的内存分配，Queue<T> 实现了循环缓冲区的逻辑。当数组的末尾没有足够空间时，新元素可以被放置在数组的开始位置（如果那里有空间的话）。

    动态扩容：当内部数组不够大以容纳更多元素时，Queue<T> 会自动创建一个更大的数组，并将所有现有元素复制到新数组中。这个过程称为“动态扩容”。

    时间复杂度：Enqueue 和 Dequeue 操作通常是 O(1) 的时间复杂度，但在动态扩容的情况下，单个操作可能需要 O(n) 的时间复杂度，其中 n 是队列的当前元素数量。

    垃圾回收：由于 Queue<T> 是基于数组的，所以它的元素是托管在CLR的堆上的。当队列实例不再被引用时，它和它的内部数组都会被垃圾回收器回收。

    下面是一个简单的 Queue<T> 的使用示例：

    Copy
    using System.Collections.Generic;

    // 创建一个 Queue 实例
    Queue<int> queue = new Queue<int>();

    // 入队
    queue.Enqueue(1);
    queue.Enqueue(2);
    queue.Enqueue(3);

    // 查看队列的第一个元素
    int first = queue.Peek(); // 返回 1，但不移除它

    // 出队
    int dequeued = queue.Dequeue(); // 返回 1，并将其从队列中移除

    // 遍历队列（注意：这会从队列的头部到尾部遍历元素）
    foreach (int item in queue)
    {
        Console.WriteLine(item);
    }


    在这个示例中，我们创建了一个 Queue<int> 的实例，并向其中入队了几个元素。然后我们查看了队列的第一个元素，并将其出队。我们还遍历了队列中的元素，这将按照先进先出的顺序进行。由于 Queue<T> 的动态数组实现，我们不需要担心队列的大小限制，它会根据需要自动增长。
    ```

- HashSet 哈希集合
    ```
    在C#中，HashSet<T> 是一个基于哈希表的集合数据结构，它提供了高效的元素查找、添加和删除操作。HashSet<T> 是在 System.Collections.Generic 命名空间中定义的，它存储一组不重复的元素，即任何两个元素都不相等。HashSet<T> 不保证元素的顺序，因为它们是根据哈希码组织的。

    以下是 HashSet<T> 的一些关键特性：

    泛型支持：HashSet<T> 是泛型的，可以存储任何类型的对象。

    唯一性：集合中的每个元素都必须是唯一的。

    无序集合：HashSet<T> 中的元素没有特定的顺序。

    高效的查找：由于基于哈希表，HashSet<T> 可以提供接近 O(1) 的平均时间复杂度进行元素查找。

    HashSet<T> 的内部实现涉及以下几个方面：

    内部哈希表：HashSet<T> 使用一个内部哈希表来存储元素。哈希表是一个数组，数组的每个槽位称为“桶”。

    哈希码：当向 HashSet<T> 添加一个元素时，它会使用元素的 GetHashCode 方法来计算哈希码。哈希码决定了元素在哈希表中的位置。

    冲突解决：如果两个元素具有相同的哈希码或不同的哈希码映射到同一个桶，这称为“哈希冲突”。HashSet<T> 使用链表来解决冲突，即在同一个桶中的元素会形成一个链表。

    动态扩容：随着元素的添加，哈希表可能会变得过于拥挤，这会增加哈希冲突的概率并降低性能。为了维持操作的效率，HashSet<T> 会在负载因子（元素数量与桶数量的比率）达到一定阈值时增加哈希表的大小，即进行“重新哈希”或“扩容”。

    元素的相等性：HashSet<T> 使用元素的 Equals 方法来确定两个元素是否相等。如果 Equals 方法返回 true，则两个元素被视为相同，新元素不会被添加到集合中。

    垃圾回收：HashSet<T> 和它的内部结构都是托管在CLR的堆上的，因此它们会受到垃圾回收器的管理。

    下面是一个简单的 HashSet<T> 的使用示例：

    Copy
    using System.Collections.Generic;

    // 创建一个 HashSet 实例
    HashSet<int> hashSet = new HashSet<int>();

    // 添加元素
    hashSet.Add(1);
    hashSet.Add(2);
    hashSet.Add(3);

    // 尝试添加重复的元素（这将失败，因为元素必须是唯一的）
    bool added = hashSet.Add(2); // 返回 false

    // 检查元素是否存在
    bool contains = hashSet.Contains(2); // 返回 true

    // 移除元素
    hashSet.Remove(1);

    // 遍历 HashSet
    foreach (int item in hashSet)
    {
        Console.WriteLine(item);
    }


    在这个示例中，我们创建了一个 HashSet<int> 的实例，并向其中添加了几个元素。我们尝试添加一个重复的元素，但这会失败，因为 HashSet<T> 中的元素必须是唯一的。我们还检查了一个元素是否存在，并移除了一个元素。由于 HashSet<T> 的哈希表实现，这些操作都非常高效。
    ```
- Dictionary 字典
    ```
    在C#中，Dictionary<TKey, TValue> 是一个基于哈希表的泛型集合，它存储键值对，并允许快速检索值。Dictionary<TKey, TValue> 类在 System.Collections.Generic 命名空间中定义，它提供了高效的数据存储和访问机制。

    以下是 Dictionary<TKey, TValue> 的一些关键特性：

    键的唯一性：字典中的每个键都必须是唯一的。

    键值对：每个键都映射到一个特定的值。

    快速查找：字典提供了快速的键查找能力，平均时间复杂度为 O(1)。

    泛型支持：Dictionary<TKey, TValue> 是泛型的，可以存储任何类型的键和值。

    Dictionary<TKey, TValue> 的内部实现涉及以下几个方面：

    内部哈希表：Dictionary<TKey, TValue> 使用一个内部哈希表来存储键值对。哈希表是一个数组，数组的每个槽位称为“桶”。

    哈希码：当向字典添加一个键值对时，它会使用键的 GetHashCode 方法来计算哈希码。哈希码决定了键值对在哈希表中的位置。

    冲突解决：如果两个键具有相同的哈希码或不同的哈希码映射到同一个桶，这称为“哈希冲突”。Dictionary<TKey, TValue> 使用开放寻址或链表来解决冲突，具体取决于实现。

    动态扩容：随着元素的添加，哈希表可能会变得过于拥挤，这会增加哈希冲突的概率并降低性能。为了维持操作的效率，Dictionary<TKey, TValue> 会在负载因子达到一定阈值时增加哈希表的大小，即进行“重新哈希”或“扩容”。

    键的相等性：Dictionary<TKey, TValue> 使用键的 Equals 方法来确定两个键是否相等。如果 Equals 方法返回 true，则两个键被视为相同，新的键值对不会被添加到字典中。

    垃圾回收：Dictionary<TKey, TValue> 和它的内部结构都是托管在CLR的堆上的，因此它们会受到垃圾回收器的管理。

    下面是一个简单的 Dictionary<TKey, TValue> 的使用示例：

    Copy
    using System.Collections.Generic;

    // 创建一个 Dictionary 实例
    Dictionary<string, int> dictionary = new Dictionary<string, int>();

    // 添加键值对
    dictionary.Add("apple", 1);
    dictionary.Add("banana", 2);
    dictionary.Add("cherry", 3);

    // 尝试添加重复的键（这将抛出异常）
    // dictionary.Add("apple", 10); // 抛出 ArgumentException

    // 检查键是否存在
    bool containsKey = dictionary.ContainsKey("banana"); // 返回 true

    // 获取值
    int value = dictionary["apple"]; // 返回 1

    // 更新值
    dictionary["apple"] = 10; // 更新键 "apple" 对应的值为 10

    // 移除键值对
    dictionary.Remove("cherry");

    // 遍历 Dictionary
    foreach (KeyValuePair<string, int> kvp in dictionary)
    {
        Console.WriteLine($"Key: {kvp.Key}, Value: {kvp.Value}");
    }


    在这个示例中，我们创建了一个 Dictionary<string, int> 的实例，并向其中添加了几个键值对。我们尝试添加一个重复的键，但这会抛出异常，因为字典中的键必须是唯一的。我们还检查了一个键是否存在，并获取、更新和移除了键值对。由于 Dictionary<TKey, TValue> 的哈希表实现，这些操作都非常高效。
    ```
- SortedSet 排序集合
    ```
    在C#中，SortedSet<T> 是一个存储不重复元素的集合，并且保持元素按照指定的比较器（默认为元素类型的自然顺序）排序。SortedSet<T> 类在 System.Collections.Generic 命名空间中定义，它提供了一种方法来快速检索已排序的数据。

    以下是 SortedSet<T> 的一些关键特性：

    自动排序：集合中的元素根据提供的 IComparer<T> 接口实例（如果没有提供，则使用默认的比较器）自动排序。

    唯一性：集合中的每个元素都必须是唯一的。

    泛型支持：SortedSet<T> 是泛型的，可以存储任何类型的对象。

    有效的范围操作：可以有效地执行范围查询，例如查找集合中所有小于某个特定值的元素。

    SortedSet<T> 的内部实现通常基于红黑树，这是一种自平衡二叉搜索树。红黑树的每个节点都遵循以下性质，以确保树的平衡：

    每个节点要么是红色的，要么是黑色的。
    根节点是黑色的。
    所有叶子节点（NIL节点，空节点）都是黑色的。
    每个红色节点的两个子节点都是黑色的（从每个叶子到根的所有路径上不能有两个连续的红色节点）。
    从任一节点到其每个叶子的所有简单路径都包含相同数目的黑色节点。

    这些性质确保了红黑树在最坏的情况下仍然提供接近 O(log n) 的时间复杂度，用于插入、删除和查找操作，其中 n 是树中元素的数量。

    SortedSet<T> 的操作包括：

    添加元素：在添加新元素时，SortedSet<T> 会将其放在保持树排序的正确位置，并执行可能需要的旋转和重新着色操作来维持红黑树的性质。

    删除元素：删除元素时，SortedSet<T> 会找到要删除的节点，然后重新安排树并执行必要的旋转和重新着色操作。

    查找元素：查找操作利用了二叉搜索树的性质，可以快速定位到特定的元素。

    遍历元素：可以按照排序顺序遍历集合中的元素。

    下面是一个简单的 SortedSet<T> 的使用示例：

    Copy
    using System.Collections.Generic;

    // 创建一个 SortedSet 实例
    SortedSet<int> sortedSet = new SortedSet<int>();

    // 添加元素
    sortedSet.Add(3);
    sortedSet.Add(1);
    sortedSet.Add(2);

    // 集合现在自动排序：1, 2, 3

    // 检查元素是否存在
    bool contains = sortedSet.Contains(2); // 返回 true

    // 移除元素
    sortedSet.Remove(1);

    // 遍历 SortedSet
    foreach (int item in sortedSet)
    {
        Console.WriteLine(item); // 输出 2, 3
    }


    在这个示例中，我们创建了一个 SortedSet<int> 的实例，并向其中添加了几个元素。由于 SortedSet<T> 的内部红黑树实现，这些元素会自动排序。我们还检查了一个元素是否存在，并移除了一个元素。由于红黑树的性质，这些操作都是高效的，即使在最坏的情况下也能保持对数时间复杂度。
    ```
- SortedList 排序列表
    ```
    在C#中，SortedList<TKey, TValue> 是一个集合类，它同时结合了数组和二叉树的特点，以键值对的形式存储数据，并且保持键的排序顺序。SortedList<TKey, TValue> 类在 System.Collections.Generic 命名空间中定义。

    SortedList<TKey, TValue> 的实现原理主要基于两个内部数据结构：

    键数组：一个内部数组用于存储键，这些键按照排序顺序排列。

    值数组：另一个内部数组用于存储与键数组对应的值。

    以下是 SortedList<TKey, TValue> 的一些关键特性：

    键的排序：键在列表中按照顺序存储，通常是使用键类型的默认比较器来排序，也可以指定自定义的比较器。

    查找效率：由于键是排序的，SortedList<TKey, TValue> 可以使用二分查找算法来快速定位键，这使得查找操作的时间复杂度为 O(log n)。

    插入和删除效率：插入和删除操作可能需要移动元素以保持键的排序顺序，因此这些操作的时间复杂度为 O(n)，其中 n 是列表中的元素数量。

    内存效率：与基于树的数据结构（如 SortedDictionary<TKey, TValue>）相比，SortedList<TKey, TValue> 在内存使用上通常更为紧凑，因为它使用的是连续的内存空间。

    元素访问：可以通过键或索引来访问元素，访问特定索引的时间复杂度为 O(1)。

    SortedList<TKey, TValue> 适合于元素数量相对较少且插入和删除操作不频繁的场景，因为这些操作涉及到数组的移动，可能会比较耗时。但是，对于查找密集型的应用，SortedList<TKey, TValue> 提供了很好的性能，因为它可以利用二分查找快速定位元素。

    在使用 SortedList<TKey, TValue> 时，应当考虑到其性能特点，并根据应用场景的具体需求来选择合适的集合类型。如果需要频繁的插入和删除操作，可能会考虑使用 SortedDictionary<TKey, TValue>，它虽然在内存使用上不如 SortedList<TKey, TValue> 紧凑，但在插入和删除操作上通常提供更好的性能，因为它基于红黑树，这些操作的时间复杂度为 O(log n)。
    ```