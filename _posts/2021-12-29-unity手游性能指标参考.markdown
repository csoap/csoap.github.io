---
layout:     post
title:      "Unity手游性能指标参考"
subtitle:   ""
date:       2021-12-29
author:     "CSoap"
header-img: "img/home-bg-o.jpg"
tags:
    -
---
- 特效
    - 特效贴图占用内存:建议小于128KB（尺寸不超过256*256就可以表现出来效果）
    - 粒子发射器数量:建议小于5
    - 粒子数量峰值
        - 建议小于50
        - ProjectK 最多的是登录界面166个
    - DrawCall 峰值
        - drawcall概念：
            - 一艘船要通过巴拿马运河需要花费大量的时间和金钱，让尽可能少的船装载尽可能多的货物，是保证快速通过运河到达目的地的最有效方式
            - 分到很多个DrawCall上，那么CPU会消耗大量的时间和性能去用于前期的准备工作，从而形成了“CPU满负荷运转，GPU无所事事”的怪象。因此确保每一次DrawCall都高效运行
        - 建议小于10
        - ProjectK 一个活动界面有一个例外：峰值24
        - 粒子特效如何进行drawcall的优化
            - GPU Instancing
                - 作用
                    - 批渲染Mesh相同的那些物体，以降低DrawCall数
                    - 这些物体可以有不同的参数，比如颜色与缩放
                - GPU Instancing与静态批处理，动态批处理的区别
                    - 使用静态，动态批处理物体的材质的所有参数是相同的，因为使用Renderer.sharedMaterial修改参数，则所有物体都会受影响。而使用Renderer.material会生成新实例，没法进行批处理
                    - 使用GPU Instancing的同一类物体的材质对象相同，但可以在代码中通过接口设置不同的参数，但仍会被批渲染
                - 限制
                    - 粒子系统的渲染模式为Mesh
                    - Shader支持GPU Instancing
                    - 平台支持GPU Instancing
            - 开启动态合批，缺点：只能处理小于900个顶点属性的物体，必须使用同一个材质球等
                - Static Batching：内存占用比较大，物体不能移动等
            - 降低特效效果
    - overdraw
        - 概念：是一个描述像素重复绘制次数的概念
        - 平均每像素overdraw率 建议小于3
        - ProjectK 一个光照特效：fxui_zisi_Zhufu_top， 平均有6.6 最高8.6 严重需要优化，主要问题是特效太多层
        - 怎么降低overdraw
            - 可以考虑在中低端机型上降低粒子数、同屏粒子数，通过做减法来减少Overdraw，比如只显示“关键”粒子特效或自身角色释放的粒子特效等；也可以通过尽可能降低粒子特效在屏幕中的覆盖面积来降低Overdraw，因为覆盖面积越大，层叠数也就越高，其渲染开销也会越大
    - 关闭碰撞（Collision或Trigger）
    - 是否开启Prewarm（预热）
        - what
            - 开启Prewarm选项后，粒子系统会在加载后立刻执行一个完整的粒子发射周期。典型例子：火焰特效的应用，例如战乱中一间燃烧的木屋。开启Prewarm选项，我们就能直接看到熊熊燃烧的大火，而不是看一遍火焰从小烧到大的过程
        - 缺点
            - 启Prewarm选项，会使得粒子系统在使用时的第一帧产生相对集中的CPU耗时，那么很可能会造成运行时局部卡顿
    - 常见优化
        - 在中低端机型上降低粒子数、同屏粒子数，比如仅显示“关键”粒子特效或自身角色释放的粒子特效等，从而降低Update的CPU开销
        - 尝试关闭离当前视域体或当前相机较远的粒子系统，离近后再进行开启，从而避免不必要的粒子系统Update的开销
        - 尽可能降低粒子特效在屏幕中的覆盖面积，覆盖面积越大，层叠数越多，其渲染开销越大
- textMeshPro 代替 text + outline or shadow (减少网格)
- rawImage 与Image 对比
    - Image组件只能使用TextureType为Sprite类型的资源；而RawImage使用的纹理资源可以设置为任意Type
    - 从UGUI源码中看，RawImage类型的API函数很少，功能比较简单，而Image类型的功能较复杂
