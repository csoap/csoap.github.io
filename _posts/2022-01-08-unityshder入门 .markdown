---
layout:     post
title:      "shader入门"
subtitle:   "阅读《Unity Shader入门精要》一书摘录与思考"
date:       2022-1-08
author:     "CSoap"
header-img: "img/home-bg-o.jpg"
tags:
    - gc
---
- 渲染流水线
    - 三个阶段
        - 应用阶段(开发者具有这阶段的绝对控制权)
            - 通常由CPU负责
            - 重点输出:**渲染图元**,通俗说,渲染图元是点 线 三角面等
            - 三个任务
                - 准备好场景数据,如:摄像机位置 视锥体 场景中的模型 与光源
                - 粗粒度剔除工作,把不可见物体剔除
                - 设置每个模型的渲染状态,如:材质 物理 shader等
            - 三个阶段
                - 把数据加载到显存中
                    - 渲染所需数据从硬盘读取到系统内存,再被加载到显卡上的存储空间(显存)
                    - 为什么要加载到显存
                        - 显卡对显存的访问速度更快,且多数显卡对应系统内存没有直接访问权力
                - 设置渲染状态
                    -使用哪**个顶点着色器 片源着色器 纹理 材质**等,如果没有更改渲染状态,则使用同一个渲染状态
                - 调用DrawCall
                    - 是什么
                        - 根据第一阶段的输入顶点数据准备和第二阶段的渲染状态设置进行渲染,渲染命令就是DrawCall
                        - 从CPU发起,GPU接收并计算,最终输出成屏幕上显示的像素
                        - 一个DrawCall会直想本次调用需要渲染的图元列表
        - 几何阶段
            - 通常用GPU负责
            - 主要任务:把渲染图元进行多部处理,**输出屏幕空间的二维顶点坐标,每个顶点对应的深度值,着色等信息**
        - 光栅化阶段
            - GPU负责
            - 主要任务:决定每个渲染图元中的哪些像素应该被绘制在屏幕上
                - 怎么做
                    - **逐顶点**数据(纹理坐标 顶点颜色等)进行**插值**,再进行**逐像素**处理
    - 几何阶段和光栅阶段可以分成一下GPU流水线
        - 绿色:完全可编程控制,黄色:可以配置不可编程,蓝色:GPU固定实现,开发者无控制权
        ![GPU流水线](/img/in-post/post-js-version/shader/shader_1.png)
        - 几何阶段
            - 顶点着色器
                - 作用:用于实现顶点的**坐标变换**,顶点着色等
                    - 坐标变换是什么
                        - 通过改变顶点位置模拟水面布料
                        - 把顶点坐标从模型空间转换到**齐次裁剪**空间
                            - 齐次裁剪是什么
                - 怎么做
                    - 输入进来的每个顶点都会调用一次顶点着色器
            - 曲面细分着色器(可选,作用:细分图元) 几何着色器 (可选,作用:逐图元着色操作)
            - 裁剪: 不在摄像机视野内的顶点裁剪,并剔除某些三角图元的面片
                - 部分在视野内的图元需要裁剪,生成新的顶点(位于事业边界的交点处)
            - 屏幕映射:每个图元的坐标转换到屏幕坐标系中(**缩放**过程)
        - 光栅阶段(输入:屏幕坐标系的顶点以及顶点额外信息,如深度z,法线,视角等)
            - 目标:计算每个图元覆盖了哪些像素,为这些像素计算颜色
            - 步骤
                - 三角形设置
                    - 为什么生成三角形
                        - 为了得到三角网格对像素的覆盖情况,必须计算每条边上的像素坐标,所以需要得到三角形边界的表示方式
                - 三角形遍历
                    - 过程:检查每个像素是否被一个三角网格所覆盖,如果覆盖则生成一个**片元**
                        - 什么是片元?
                            - 包含了多个状态的几何,这些状态用于计算每个像素的最终颜色,包括 屏幕坐标,深度信息等
                - 片元着色器
                    - 过程
                        - 根据那些从顶点着色器输出的3个顶点的纹理纹理坐标插值得到片元的纹理坐标
                - 逐片元操作:修改颜色 ,深度缓存,进行混合(真正对像素产生影响的步骤)
                    - opengl成为逐片元,DirectX成为**输出合并阶段**
                    - 合并什么数据
                    - 进行什么操作
                    - 过程
                        - 片元->模板测试->深度测试->混合->颜色缓冲区
                    - 主要任务
                        - 决定每个片元的可见性,涉及测试工作,如模板测试,深度测试等
                        - 如果通过所有测试,需要把该片元的颜色值和已经存储在颜色缓冲区中的颜色进行**合并**
