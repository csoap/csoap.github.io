---
layout:     post
title:      "lua虚拟机内部实现"
subtitle:   "lua虚拟机"
date:       2021-08-13
author:     "CSoap"
header-img: "img/home-bg-o.jpg"
tags:
    -lua虚拟机概述
---
- 虚拟机指令概述
    - lua把虚拟机执行代码的效率作为一个非常终要的设计目标
    - 根据指令获取操作数方式的不同，把虚拟机分成
        - stack based 基于堆栈
        - register based 基于寄存器
    - stack based
        - 多数虚拟机，入JVM，Python都是采用传统的stack based。stack based vm 的指令一般都是在当前stack中获取和保存操作数的。比如一个加法赋值运算：a=b+c,对于stack based vm 会转化成如下指令

        ```
            push b; // b入栈
            push c; // c入栈
            add;    // 将stack顶部的两个值弹出后相加，结果入栈
            mov a; // 将栈顶结果放入a
        ```

        - 基于当前stack来查找操作数，相当于所有操作数的存储位置都是在运行时决定的
            - 优点
                - 在编译器的代码生成阶段不需要额外在为哪里存储操作费心，所以stack based 编译器实现起来比较简单直接，每条指占用的存储空间比较小
            - 缺点
                - 对于简单的运算，stack based vm 会使用过多的指令组合来完成，这样就增加了整体指令集合的长度，vm会使用同样多的迭代次数来执行这些指令，效率下降
                - 由于操作数都要在stack，移动这些操作数的内存复制大大增加，也影响效率。
    - register based
        - lua 就是采用这个。Register based vm的指令都是在已经分配好的寄存器中存取操作数。
        - 对于上面的运算，Register based vm一般会使用如下指令

        ```
        add a b c; //将b与c 的寄存器的值相加，将结果保存在a的寄存器中
        ```

        - 优点
            - 用一条指令完成了上面多条指令的计算工作，并且有效地减少了内存复制操作。提高效率
        - 缺点
            - 在编译器设计上，就要在代码生成阶段对寄存器进行分配，增加了实现的复杂度，并且每条指令所占用的存储空间也相应的增加了。
            


