---
layout:     post
title:      "DOTS"
subtitle:   "DOTS"
date:       2024-11-14
author:     "CSoap"
header-img: "img/home-bg-o.jpg"
tags:
    - DOTS
---
- link: https://www.bilibili.com/video/BV17fajenEid
- 游戏
    - 红色警戒2
        - 启发式算法 A*
            - 每次按照"看起来"最短的原则,进行寻找
    - 星际2
        - link https://www.bilibili.com/video/BV1EN411q7Q8 这个视频很不错
        - 在约束德劳内三角开分(CDT)所构建的寻路网上使用AStart+漏斗算法来寻路
            - 单位半径优化
        - 单位行为算法是基于Boids集群算法改良的
    - 魔兽争霸3
        - 流场算法+蜂群算法
            - 流场算法
                - 对于一群接近目标点的单位操作寻路可以使用
            - A*
                - 当每个单位有不同的目标点时，使用单独的流场进行寻路可能会变得非常计算密集，因为每个流场都需要独立计算和更新
                ```
                当每个单位有不同的目标点时，使用单独的流场进行寻路可能会变得非常计算密集，因为每个流场都需要独立计算和更新。在这种情况下，通常会考虑其他寻路策略或优化流场的使用。以下是一些可能的方法：
                传统寻路算法：
                对于具有独立目标的个别单位，可以使用传统的寻路算法，如A*或Dijkstra算法，来为每个单位找到路径。这些算法可以为每个单位生成一个具体的路径，而不是依赖于流场。

                共享流场与个别调整：
                使用一个共享的基础流场来处理通用的避障和地形成本，然后对每个单位进行个别调整。例如，可以在基础流场的基础上添加一个针对个别单位目标的向量场，或者对单位进行微调以确保它们朝向各自的目标。

                动态流场：
                如果单位的目标点相对集中或者存在某种模式，可以动态地创建和更新流场，以覆盖多个单位的目标。这种方法需要智能地管理流场的创建和销毁，以避免性能开销。

                层次化寻路：
                在大规模环境中，可以使用层次化寻路系统。在高层次上，使用一个粗略的流场来指导单位朝向它们的目标区域；在低层次上，使用更精细的寻路技术来处理具体的目标点。

                ```
            - 蜂群算法,从群里中选一个"首领"
        - 表现:
            - 三角形的阵型，可以使部队在移动的时候也可以保持阵型不乱，就是步兵走前面，火枪手走后面，但缺点是移动速度慢，跑的快的会停下来等跑的慢的
            - 分散的阵型，可以发挥部队的移动性，就是走的快，但阵型很分散，就是跑的快的在前面猛跑，跑的慢的自然落到了后面，在后面猛追
    - 深度优先搜索 DFS
        - 假设你站在迷宫的某个岔路口，然后想找到出口。你随意选择一个岔路口来走，走着走着发现走不通的时候，你就回退到上一个岔路口，重新选择一条路继续走，直到最终找到出口
    - 广度优先搜索 BFS
        - 和深度优先搜索一条路走到黑相反，广度优先搜索遵循的是不求只走一条路，而是在每一步都把附近所有的点都尝试完，给每个有路的位置打上标记，并设置访问步数，直到遍历完所有路径或找到终点。
    - BFS vs DFS
        - 广度优先搜索（Breadth-First-Search），简称 BFS。它是一种“地毯式”层层推进的搜索策略，即先查找离起始顶点最近的，然后是次近的，依次往外搜索,所有探索过的路径需要将他们标记为灰色：广度优先搜索较之深度优先搜索之不同在于，深度优先搜索旨在不管有多少条岔路，先一条路走到底，不成功就返回上一个路口然后就选择下一条岔路，而广度优先搜索旨在面临一个路口时，把所有的岔路口都记下来，然后选择其中一个进入，然后将它的分路情况记录下来，然后再返回来进入另外一个岔路，并重复这样的操作。
    - A* 启发式搜索
        - link https://www.bilibili.com/video/BV16P411c7CL https://www.bilibili.com/video/BV1bv411y79P
        - F = G+H 起点到终点总代价 = 从某一结点到开始节点的移动代价+从某一结点到重点的**估计**移动距离
        - H 是不确定的,启发式函数 h(n) 对算法的效率和准确性至关重要。一个常见的启发式函数是欧几里得距离（直线距离），但在许多实际情况下，曼哈顿距离（网格距离）或对角线距离可能更为适用.
        - A算法的效率和准确性依赖于启发式函数的选择。理想的启发式函数会给出一个既不过高估计也不过低估计的成本，从而允许A算法快速找到最优路径。如果 h(n) 总是低估实际成本，A*算法保证能找到最短路径，但可能需要更长的时间。如果 h(n) 高估实际成本，算法可能更快，但不保证找到最短路径
        - 开放列表和封闭列表：A*算法维护两个列表，开放列表（Open List）和封闭列表（Closed List）
            - 开放列表包含待评估的节点
            - 封闭列表包含已经评估过的节点
        - 常用的"预估代价"函数,又名启发函数
            - 欧拉距离(两点之间的直线距离),一般应用于可以任意方向移动的
            - 曼哈顿距离 (两点在竖直方向和水平方向上的距离总和),一般应用于上下左右移动的
        - 应用
            - 寻找迷宫最佳路径
            - 导航中:地图最佳路径规划
    - BFS vs A*
        - bfs 对路径的寻找没有方向性,会朝各个方向进行探测,最坏情况下要跑完整个地图才能找到路径
        - A* 不会去探索所有的边界方块,而是选择当前"代价"最低的方块进行探索
    - 游戏中操作一个团体进行移动,三个方式
        - 流场算法
            - 从起点"倒水"变为再终点"倒水",得出水在场地中的每个位置会向哪个方向流,然后逆着水流走就得到了单位移动的路径
            - link https://www.bilibili.com/video/BV1ui4y1c7wx
        - 从群里中选一个"首领",只需要计算首领的寻路,其他单位跟着首领进行移动即可
        - 制作一定的函数,使群体遵循一个规则
            - 分离:每个单位不产生碰撞
                - 动态躲避 三种方式
                    - 每个单位都会向四周"吹风",使得水流不会向单位流淌
                    - 给每个单位安装一个"喇叭",让其在碰到其他单位的时候播放"请让路",谁先开喇叭,谁就等着对方让路就行,如果实在让不出一条路,那就重新再找新的路线(红警所使用的障碍物躲避方式),检查单位是否可移动比较容易使用
                    - orca算法
                        - link https://www.bilibili.com/video/BV1Nb421n7qJ
                        - 基于线性规划,在多边形解中找最优解,每人让出1半
            - 聚合:距离群里近的个体会被群体吸引,并加入群体中
            - 速度匹配:群体速度趋于一致(蜂群算法的核心思想)
    - RVO 动态避障
        - link https://www.bilibili.com/video/BV1Nb421n7qJ

