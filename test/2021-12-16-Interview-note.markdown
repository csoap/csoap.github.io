---
layout:
title:      "面试记录"
subtitle:   ""
date:       2021-12-16
author:     "CSoap"
header-img: "img/home-bg-o.jpg"
tags:
    - 面试
---

- 记录一些没想过的问题,项目相关问题略过

- 天天玩家（北京）
    - 项目类型:休闲模拟,了解了项目情况就不感兴趣了
    - 没接触的问题
        - 特效节点如何在两个图片中显示
            - 特效挂在新的canvas下，canvas调整层级顺序
        - 特效遮罩 如何实现
            - https://www.freesion.com/article/7333908188/
            - 求出容器的边界
            - 把边界传给每一个条目的shader
            - 判断顶点坐标是否超出边界坐标，把超出的部分透明度设为0
- 龙创悦动(北京)
    - 项目:SLG(已上线处于数据调优阶段)
    - 一面
        - 如何实现链表的快速查询(回答多级链表)
        - 还有什么查找算法
    - 二面 主程
- 完美世界(北京)
    - 项目:二次元卡牌
    - 快速排序
    - 备注:
        - 技术面 + 制作人面
            - unity如何编译脚本
                - 默认情况下，Unity 几乎将所有游戏脚本都编译到预定义 程序集 Assembly-CSharp.dll 中
                    - 每次更改一个脚本时，Unity 都必须重新编译所有其他脚本
                    - 所有脚本都针对所有平台进行编译
                - 怎么优化编译速度
                    - 打包DLL
                        - 把部分代码打包成dll，就像DOTween这种插件直接提供了dll一样， 缺点：处理不同的宏和DLL引用
                    - 利用Unity多阶段编译（分四步编译），四个阶段：https://docs.unity3d.com/cn/2017.4/Manual/ScriptCompileOrderFolders.html
                        - 插件Mad Compile Time Optimizer
                        - 只要将不常修改的代码放到特定文件夹就完事儿了其实…这里我选择的是Standard Assets文件夹。这样唯一的一个限制是Standard Assets里的代码无法引用外面的代码，不过这里全是放的插件
        - hr 双人面
- 光宇游戏(北京)
    - 变量a,b在不用其他辅助变量交换值
        - 三次加减法
            - num1 = num1 + num2
            -  num2 = num1 - num2
            - num1 = num1 - num2
        - 三次异或运算
            -  num1 = num1 ^ num2
            - num2 = num1 ^ num2
            - num1 = num1 ^ num2
    - 实现斐波那契的几种做法
    - C#
        - string StringBuilder区别 以及对应线程安全
            - string 线程安全, stringbuilder线程不安全,频繁拼接用stringbuffer
        - ref out
            - https://blog.csdn.net/qiaoquan3/article/details/51201398
        - struct class
            - https://www.cnblogs.com/gsk99/archive/2010/12/13/1904552.html
            - class和struct最本质的区别是class是引用类型，而struct是值类型
            - class
                - new一个类的实例时，在堆栈（stack）上存放该实例在托管堆（managed heap）中的地址，而实例的值保存在托管堆（managed heap）中
            - struct
                - struct实例在创建时分配在线程的堆栈（stack）上，它本身存储了值
        - 接口和 抽象类
            - https://www.cnblogs.com/lidaying5/p/10515251.html
            - 抽象类主要用来规定某些类的基本特征
            - 接口主要用来表示不同类之间的共有特征
        - try catch finally,try中return,finally是否会执行,为何会执行finally(当时回答会)
        - 堆内存,栈内存, 整形能否存在堆内存中(如int a 放在某个对象中即可)
    - lua
        - local 实现机制
        - lua 垃圾回收 三色标记状态分别是什么
            - 白色：待回收的对象
            - 灰色：待遍历的对象
            - 黑色：不回收的对象
        - lua 元表, 应用的场景
        - lua ： . 语法糖
    - unity
        - unity生命周期(按顺序)
        - drawcall (是什么? 怎么做)
            - https://blog.csdn.net/yu1368072332/article/details/85676537
            - what
                - 在unity中，每次CPU准备数据并通知GPU的过程就称之为一个DrawCall。
                - 具体过程就是：设置颜色-->绘图方式-->顶点坐标-->绘制-->结束，所以在绘制过程中，如果能在一次DrawCall完成所有绘制就会大大提高运行效率，进而达到优化的目的。
        - overdraw(是什么? 怎么做)
            - what
                - 也就是过度绘制，就是在游戏运行过程中重复绘制同一像素的问题

- 阿里灵犀互娱（上海）
    - 项目：MMO 仙侠类 （已研发2年，预计22年下半年上线，已耗资2亿）
    - 一面 （组长,1小时，不包括面试官前期有事跑出去几分钟。。）
        - ui框架思路
        - lua开发过程，如英雄模块
        - 红点设计思路
        - lua开发注意规范
        - lua 元表设计配置优化，前后对比（需要数据）
        - lua 如果分析性能
            - luaprofiler,的实现原理
        - 资源怎么划分，ab管理（什么时候卸载）
        - ab如何分包
        - 初始化加载资源里面有什么内容
            - 音效 音频 字体 通用图集 ui的animation 登陆界面的特效,领主装扮
        - 远程资源下载
            - 匹配规则
                - 妃子 英雄 npc的spine chearcter_开头的角色模型
            - 固定
                - 业务活动等的图集 特效 动画
        - 所有界面都有打图集嘛？为什么，占用内存？
        - 切换场景 远程资源是否转菊花（场景不存在位于远程资源情况）
        - 预制检查工具有哪些内容？思考一下如何拓展
            - 去除静态文本,空脚本引用,smallpanel整理
        - 为啥离职
        - 2-3年职业规划
        - 总结
            - 面试不深，但是问题很考验组织语言能力，用最简单的话把技术说清楚就可以
            - 面试方向没能把握主动权
            - 今年第一次面大厂，加上又是阿里（一个面无表情的面试官），整的有点紧张，前期组织语言没做好，后面好点。
    - 二面 (主程,35分钟,面试官友好有礼貌)
        - 资源管理 哪块觉得最重要
            - 回答了ab, ab的一些策略以及一些为什么使用这个策略 的优势处,卸载ab的策略漏了说
            - 再提问,全部资源打包1个ab 和每个资源各自打1个ab 会有什么问题,有提示说 如果全部打包在一起会不会有卸载失败啥的问题,需要去查一下
                - 一方面是太细导致更高频的IO的操作，另一方面就是AB的序列化文件内存占用大小问题。你一个几十kb的AB 光序列化文件就得占去几百KB(Unity 5.3 ~ 5.5 版本中)
                - 对于AB的打包，尽可能把逻辑上同时出现（一个Prefab中非Share的Asset）、小而细碎的资源（Shader、Material、粒子系统等）尽可能打包在一起，并通过LoadAll来进行加载，因为这样会带来更好的加载效率
        - 资源优化做了什么
        - loopscrollview 优化做了什么
        - lua优化做了哪些
        - 渲染了解多少,比如光栅化过程
        - 擅长的方向,ui 动画 渲染 都可以? 也就ui擅长些,需要有一个**擅长**的方向
        - 业务模块哪个功能你觉得设计的比较好? 战车,对象池 对象封装继承
        - 数学这块运用的多吗,向量,四元数等
        - 还是比较注重口头描述

        - 总结
            - 提问基本都是给个大的方向 让你去选择回答,看重语言表达与组织能力
            - 问的问题都是项目相关
        - 反馈
            - 学习以及表达能力得到认可,但是项目技术栈认为需要提升,需要综合考虑,等消息了.
    - 反馈,对方想要unity资深一点的,履历不够,问我cocos做不(拒了)

- 深圳同拳科技 moba 22.1.11 下午4点
    - 自我介绍
    - 项目技术点
    - 做了哪些优化

- 上海游族网络 百川工作室 3d卡牌 22.1.13 下午4点
    - 只记录有印象的点
    - 大量资源管理相关的问题,图集 贴图格式, 资源加载的问题
        - 贴图内存占用多少 , 100M, pss最大多少 700M左右, 安装包本体多大, ab版本热更最大多大
            - 对比竞品
            - 怎么优化贴图内存
    - 特效如何剔除
        - scrollview 遮罩原理
        - 特效转2d纹理
    - 还有很多问题想不起来
    - 两个主程交叉面1h,随后hrbp面,30min 晚上直接告知结果过了进入谈薪阶段

- 英雄互娱 上海 即时卡牌项目+mmo 4v4 主发海外 22.1.14 下午4点
    - 2个主程交叉面,实际只有一个主程
    - 问的问题根之前大同小异
    - spine 原理,优化等
        - 原理
            - 骨骼动画则是把角色的各部分身体部件图片绑定到一根根互相作用连接的“骨头”上，通过控制这些骨骼的位置、旋转方向和放大缩小而生成的动画
            - 骨骼的动画数据保存在一个 json 或 skel文件里面
            -  骨骼动画使用差值算法计算中间帧,更流畅
        - 优化
            - 原来导出的spine数据是.json格式，加载、分析数据慢, .json加载速度100ms
            - 现在采用二进制的binary导出为.skel格式，加载速度能提高80~90%,.skel加载速度17ms
            - 异步加载
            - 提高读取效率, 池子
                - 当遇到重复的Spine动画时，直接把上次加载的数据返回即可
                - 纹理缓存池,引用计数法
                    - spine初始化时会时，若纹理缓存池中没有图片，会加载图片；若存在，则直接使用纹理，引用计数加1。spine析构时，若纹理的引用计数为0，则从纹理缓存池中释放图片，否则引用计数减1
                - 数据缓存池
                    - 每个spine单独拥有一份文件数据。按我们的需求，我们希望不同spine可以共用一份数据
    - 缺乏3d项目,2d偏多,选择另一个有3d经验的同学

- 字节跳动 slg 广州 22.1.18 下午4点
    - 一面
        - lua配置内存占用
            - 怎么导出lua表
                - https://zhuanlan.zhihu.com/p/89426654
                - 默认值提取：优化效果显著
                    - 选取出现次数最多的值作为每个字段的原表，存到defaultValues，然后剔除每行中与默认值相同的字段
                    - 磁盘大小,未优化2565KB,优化后777KB
                    - 运行时内存：未优化为4.45MB，优化后为1.84MB，优化率达到58%；
                    - 加载耗时：未优化为6.32ms，优化后为1.18ms，优化率达到81%；
                - 字段名优化：内存优化效果显著, 项目已做完,
                    - 运行内存1022.46KB，加载耗时：1.09ms，相比默认值提取优化率达到46%
                - 客户端 服务端表格分离
                - 把指向table的值都用一个表存起来，去除重复的table存储
                - 应该从读取、查询速度方面着手，比如table别嵌套太多，2层足以。这样还能再优化90%
            - 优化
                - lua配置表只读取表中的一行,其他行数不参与内存占用

            - 自己思考何时卸载配置表会合理
            - lua和c# 配置共同存在c中
        - lua 内存占用大小
            - 登陆界面12M,主城25M,疯狂打开多个界面33M
            - Mono:主城134M,打开多个界面200M,后面持续下降到185M左右
        - 如何避免全局变量污染
            - _G,通过元表设置__newIndex ,执行检查方法
        - lua内存检测工具
            - https://zhuanlan.zhihu.com/p/29315286
            - 泄漏 LuaMemoryMonitor
                - Snapshot库已经为编辑器准备好了所有数据了，现在只需要想一个好主意、好方法来利用这些数据。这里我做了一个特别的功能，可以很高效地利用这些数据。在UnityEditor里可以对每个快照进行逻辑操作。
                - 求交集 即两个或多个快照中都存在的对象，即这些快照中的常驻内存。
                - 求补集 A在B中的补集指在A中但不在B中的对象，即A相对于B的增量。
                - 简单例子：在刚进入战斗时采样得到A快照，战斗一段时间后采样得到B快照，离开战斗场景回到主城，手动GC后采样得到C快照。求AB的补集得到一个新的快照D，D即是战斗期间新增的内存。求AC的补集得到快照E，E即是战斗期间新增并且离开战斗GC后没有释放掉的内存 。对D和E求交集，得到快照F，F即是战斗中新增但是回到主城后释放掉的内存。这其中E中的对象非常有可能就是泄露了的内存，而F中的对象是可以尝试更早地释放的内存。这时可以选中E快照，把E快照输出到Editor上，输出为一个树状结构，就像Unity自带的Profiler中一样，如果有泄露的话基本上就无所遁形了。而直接输出A快照的话，就能得到刚进入战斗时的内存分布。
            - LuaProfiler的C库
                - 原理
                    - 它在Lua虚拟机中注册了钩子函数，每次Lua Call 和 Return 的时候都会触发回调
                    - 每帧都取每帧都清空，即是逐帧统计
        - ab
            - 总数量 1313
            - 常驻的ab列表
                - luaout toluaout sound shader font tp_emoji
            - lua如何打ab,所有业务打一起吗,lua配置如何打包
        - 内存
            - 刚进入主程
                - 贴图占用100M
            - 打开多个界面,还没回收
                - 贴图占用200M
        - 代码规范
        - 资源工具 资源管理
            - 初始化清单,以及不卸载的资源
        - 红点
            - 实现原理
            - 刷新如何监测,比如某一个帧只支持刷新红点的数量,以及几帧之内支持的红点重复刷新
            - 开关红点,前后带来的消耗差异
    - 主程 二面
        - 工具做了什么
        - 贴图格式
        - lua 优化
        - EmmyLua 拓展,有没有做过拓展
- 厦门飞鱼科技 神仙道3 22.1.19 主程
    - 服务端经历做了哪些
    - spine动画,spine 多个回调动画怎么做, spine的回调api是什么
    - 战斗界面 如果网络差 影响交互体验,有没有提前表现处理
    - a b c 界面 关闭问题, 再打开已打开的界面如何处理
    - 通用跳转, 多种限制条件如何处理
    - 需要有ios经验
- 软性问题
    - 自我介绍思考
        - 引导到工作内容,取得什么成就
    - 为什么离职
        - 离职原因：自己是真心的想做好的游戏，目前的话项目已经面对海外上线，想技术上得到更好的一个提升，所以想去更好的平台，参与到更好的项目当中。
    - 职业生涯规划
        - 对自己技术上以后希望得到怎么样的提升，想进入到一个XX样的项目上，真心的想做好游戏。
        - 先是在技术上有所提升，在客户端这块儿的某一模块专精，或者怎样，踏踏实实的做事情。
        - 能表现的诚恳踏实要比那些空话好很多的
- 面试官分析
    - 主程：主程其实很看重你这个人是不是踏实诚恳，能不能胜任这份工作，聊项目的时候是，对于自己的项目， 最好有自己的想法， 比如什么技术是用得比较好的，如果能梳理出1-2点技术优势， 或可优化的地方， 会加分的，还有一点就是你目前的一个职业规划，是不是个肯去学习和努力的人。